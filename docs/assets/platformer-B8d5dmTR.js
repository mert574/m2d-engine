var M=Object.defineProperty;var P=(s,e,t)=>e in s?M(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var d=(s,e,t)=>P(s,typeof e!="symbol"?e+"":e,t);import{M as r,C as k,a as A}from"./m2d-DXT2tj7Y.js";class u{constructor(e){this.entity=e,this.context=e.context}update(){}onCollisionStart(e){}onCollisionEnd(e){}draw(){}}class T extends u{constructor(e,t={}){super(e),this.showWireframe=t.wireframe??!1,this.wireframeColor=t.wireframeColor||"#00ff00",this.wireframeWidth=t.wireframeWidth||1,this.showFPS=t.showFPS??!0,this.fpsUpdateInterval=500,this.lastFPSUpdate=0,this.frameCount=0,this.currentFPS=0}update(e){if(this.showFPS){this.frameCount++;const t=performance.now();t-this.lastFPSUpdate>this.fpsUpdateInterval&&(this.currentFPS=Math.round(this.frameCount*1e3/(t-this.lastFPSUpdate)),this.frameCount=0,this.lastFPSUpdate=t)}}draw(e){const t=this.entity.context;if(this.showWireframe){const i=this.entity.body.bounds;t.save(),t.strokeStyle=this.wireframeColor,t.lineWidth=this.wireframeWidth,t.strokeRect(i.min.x,i.min.y,i.max.x-i.min.x,i.max.y-i.min.y),t.restore()}this.showFPS&&(t.save(),t.fillStyle="#fff",t.font="16px monospace",t.textAlign="left",t.textBaseline="top",t.fillText(`FPS: ${this.currentFPS}`,10,10),t.restore())}setWireframe(e){this.showWireframe=e}setShowFPS(e){this.showFPS=e}}class y{constructor(e,t,i){if(!e||!(e instanceof CanvasRenderingContext2D))throw new Error("Valid canvas context is required");if(!t)throw new Error("Physics body is required");if(!i)throw new Error("Sprite is required");this.context=e,this.body=t,this.sprite=i,this.constraints=new Map,this.currentAnim=null,this.dead=!1;const{min:o,max:a}=this.body.bounds;this.size={x:a.x-o.x,y:a.y-o.y},this._contacts=new Set,this.addConstraint("debug",new T(this))}addConstraint(e,t){this.constraints.set(e,t)}getConstraint(e){return this.constraints.get(e)}onCollisionStart(e){this._contacts.add(e);for(const t of this.constraints.values())t.onCollisionStart(e)}onCollisionEnd(e){this._contacts.delete(e);for(const t of this.constraints.values())t.onCollisionEnd(e)}update(e){if(!this.dead)for(const t of this.constraints.values())t.update(e)}draw(e){if(this.dead)return;const t=this.body.position;this.context.save(),this.context.translate(t.x,t.y),this.context.rotate(this.body.angle),this.sprite.draw(this.context,0,0,this.currentAnim),this.context.restore();for(const i of this.constraints.values())i.draw(e)}get position(){return this.body.position}get velocity(){return this.body.velocity}setAnimation(e){this.sprite.animations.has(e)&&(this.currentAnim=e)}isFalling(e=.5){return this.velocity.y>e}isJumping(e=-.5){return this.velocity.y<e}isMovingHorizontally(e=.1){return Math.abs(this.velocity.x)>e}isMovingLeft(e=.1){return this.velocity.x<-e}isMovingRight(e=.1){return this.velocity.x>e}isInAir(){return!this.isOnGround()}isOnGround(){const e=r.Query.collides(this.body,r.Composite.allBodies(this.game.engine.world));for(const{bodyA:t,bodyB:i}of e){const o=t===this.body?i:t;if(!o.entity||o.entity.name!=="Platform")continue;const a=o.position.y-this.position.y;if(a>0&&Math.abs(a)<this.size.y)return!0}return!1}}d(y,"name","Entity");class C extends u{constructor(e,t={}){super(e),this.maxHealth=t.maxHealth||100,this.currentHealth=this.maxHealth,this.invulnerableTime=0,this.invulnerableDuration=t.invulnerableDuration||60,this.onDeath=t.onDeath||null,this.onDamage=t.onDamage||null}update(){this.invulnerableTime>0&&this.invulnerableTime--}isInvulnerable(){return this.invulnerableTime>0}takeDamage(e){this.isInvulnerable()||(this.currentHealth=Math.max(0,this.currentHealth-e),this.invulnerableTime=this.invulnerableDuration,this.onDamage&&this.onDamage(e),this.currentHealth===0&&(this.entity.dead=!0,this.onDeath&&this.onDeath()))}heal(e){this.currentHealth=Math.min(this.maxHealth,this.currentHealth+e)}draw(){if(this.entity.dead)return;const e=this.entity.position,t=this.entity.size,i=this.entity.context,o=t.x,a=4,h=e.y-t.y/2-10,l=e.x-o/2;i.fillStyle="#333",i.fillRect(l,h,o,a),i.fillStyle=this.currentHealth>30?"#2ecc71":"#e74c3c",i.fillRect(l,h,o*this.healthPercentage,a)}get healthPercentage(){return this.currentHealth/this.maxHealth}get isAlive(){return this.currentHealth>0}}const c={distance(s,e){const t=e.x-s.x,i=e.y-s.y;return Math.sqrt(t*t+i*i)},direction(s,e){return{x:e.x-s.x,y:e.y-s.y}},normalize(s){const e=Math.sqrt(s.x*s.x+s.y*s.y);return e>0?{x:s.x/e,y:s.y/e}:{x:0,y:0}},scale(s,e){return{x:s.x*e,y:s.y*e}}},g={between(s,e){return Math.atan2(e.y-s.y,e.x-s.x)},inHalfCircle(s,e){return e>0?Math.abs(s)<Math.PI/2:Math.abs(s)>Math.PI/2}};class F extends u{constructor(e,t={}){super(e),this.damage=t.damage||10,this.range=t.range||40,this.cooldown=t.cooldown||30,this.knockback=t.knockback||.02,this.isAttacking=!1,this.currentCooldown=0,this.direction=1,this.hits=new Set,this.attackDuration=10,this.attackTime=0,this.attackAnimEndTime=20,this.hitCircle=r.Bodies.circle(0,0,this.range,{isSensor:!0,isStatic:!0,collisionFilter:{category:0}}),r.Composite.add(this.entity.game.engine.world,this.hitCircle)}update(){this.currentCooldown>0&&this.currentCooldown--;const e=this.entity.position;r.Body.setPosition(this.hitCircle,e),this.isAttacking&&(this.attackTime++,this.attackTime===1&&this.checkHits(),this.attackTime>=this.attackDuration&&(this.isAttacking=!1,this.attackTime=0),this.attackTime>=this.attackAnimEndTime&&this.entity.currentAnim.includes("attack")&&this.entity.setAnimation("idle"))}checkHits(){const e=r.Query.collides(this.hitCircle,r.Composite.allBodies(this.entity.game.engine.world).filter(t=>t.collisionFilter.category===k.enemy));for(const t of e){const i=t.bodyA===this.hitCircle?t.bodyB:t.bodyA;if(!i.entity||i.entity===this.entity||this.hits.has(i.entity))continue;const o={x:this.entity.position.x+this.direction*this.entity.size.x/2,y:this.entity.position.y},a=g.between(o,i.position);if(g.inHalfCircle(a,this.direction)){this.hits.add(i.entity);const h=i.entity.getConstraint("health");h&&!h.isInvulnerable()&&(h.takeDamage(this.damage),r.Body.applyForce(i,i.position,{x:this.direction*.5,y:-.3}))}}}startAttack(e){this.currentCooldown>0||(this.isAttacking=!0,this.direction=e,this.hits.clear(),this.currentCooldown=this.cooldown,this.attackTime=0,this.entity.setAnimation(e>0?"attackRight":"attackLeft"))}draw(){const e=this.entity.position,t=this.context;t.save(),t.beginPath(),t.strokeStyle="rgba(0, 150, 255, 0.3)",t.arc(e.x,e.y,this.range,0,Math.PI*2),t.stroke(),this.isAttacking&&(t.beginPath(),t.fillStyle="rgba(255, 0, 0, 0.2)",t.strokeStyle="rgba(255, 0, 0, 0.5)",t.arc(e.x,e.y,this.range,this.direction>0?-Math.PI/2:Math.PI/2,this.direction>0?Math.PI/2:3*Math.PI/2,!1),t.fill(),t.stroke()),t.restore()}}class D extends u{constructor(e,t={}){var i,o,a,h;super(e),this.keys={left:37,right:39,up:38,down:40,jump:32,attack:88,...t.keys},this.moveForce=t.moveForce||.01,this.maxSpeed=t.maxSpeed||5,this.continuous=t.continuous??!0,this.verticalMovement=t.verticalMovement??!0,Object.values(this.keys).forEach(l=>{this.entity.game.keys.addKey(l)}),this.onMove=(i=t.onMove)==null?void 0:i.bind(e),this.onDirectionChange=(o=t.onDirectionChange)==null?void 0:o.bind(e),this.onJump=(a=t.onJump)==null?void 0:a.bind(e),this.onAttack=(h=t.onAttack)==null?void 0:h.bind(e)}update(){if(this.entity.dead)return;const e=this.entity.game.keys.pressedKeys();let t=0,i=0;if(e.has(this.keys.left)&&(t-=1),e.has(this.keys.right)&&(t+=1),this.verticalMovement&&(e.has(this.keys.up)&&(i-=1),e.has(this.keys.down)&&(i+=1)),t!==0&&i!==0){const o=Math.sqrt(2);t/=o,i/=o}if(t!==0||i!==0?(this.continuous?r.Body.applyForce(this.entity.body,this.entity.position,{x:t*this.moveForce,y:i*this.moveForce}):r.Body.setVelocity(this.entity.body,{x:t*this.maxSpeed,y:i*this.maxSpeed}),this.onMove&&this.onMove(t,i),this.onDirectionChange&&t!==0&&this.onDirectionChange(t>0?1:-1)):this.onMove&&this.onMove(0,0),e.has(this.keys.jump)&&this.onJump&&this.onJump(),e.has(this.keys.attack)&&this.onAttack&&this.onAttack(),this.continuous){const o=this.entity.velocity,a=Math.abs(o.x);if(a>this.maxSpeed){const h=this.maxSpeed/a;r.Body.setVelocity(this.entity.body,{x:o.x*h,y:o.y})}}}}class b extends y{constructor(e,t,i,o){t.friction=.001,t.frictionStatic=.001,t.frictionAir=.05,t.restitution=0,t.inertia=1/0,r.Body.setMass(t,1),super(e,t,i),this.game=o,this.jumpForce=.15,this.setAnimation("idle"),this.addConstraint("health",new C(this,{maxHealth:100,onDeath(){console.log("Game Over!"),this.game.gameOver()},onDamage(a){console.log(`Player took ${a} damage!`)}})),this.addConstraint("attack",new F(this,{damage:15,range:50,cooldown:20})),this.addConstraint("control",new D(this,{moveForce:.01,maxSpeed:5,continuous:!0,verticalMovement:!1,onMove(a,h){a!==0?this.setAnimation("run"):this.setAnimation("idle")},onDirectionChange(a){this.facingDirection=a},onJump(){this.isOnGround()&&(r.Body.applyForce(this.body,this.position,{x:0,y:-this.jumpForce}),this.setAnimation("jump"))},onAttack(){const a=this.getConstraint("attack");a&&a.startAttack(this.facingDirection)}})),this.facingDirection=1}onCollisionStart(e){var t;if(super.onCollisionStart(e),((t=e.entity)==null?void 0:t.name)==="Bee"){const i=this.getConstraint("health");i&&i.takeDamage(10)}}}d(b,"name","Player");class S extends y{constructor(e,t,i,o){r.Body.setMass(t,1),t.frictionAir=.2,t.friction=.1,t.restitution=.2,t.inertia=1/0,t.collisionFilter.category=k.enemy,super(e,t,i),this.game=o,this.speed=.5,this.idleSpeed=.3,this.detectionRange=200,this.animTime=0,this.animSpeed=.1,this.setAnimation("idle"),this.damageFlashTime=0,this.damageFlashDuration=10;const a=new C(this,40);a.invulnerableDuration=30,a.onDeath=()=>{this.game.entities.delete(this),r.Composite.remove(this.game.engine.world,this.body)},a.onDamage=()=>{this.damageFlashTime=this.damageFlashDuration,this.setAnimation("idle")},this.addConstraint("health",a),this.targetPoint=this.getNewTargetPoint(),this.targetChangeTime=0,this.targetChangeCooldown=120}getNewTargetPoint(){return{x:this.position.x+(Math.random()*50*2-50),y:this.position.y+(Math.random()*50*2-50)}}update(){if(this.dead||(super.update(),this.damageFlashTime>0&&this.damageFlashTime--,!this.game.player))return;if(c.distance(this.position,this.game.player.position)<this.detectionRange){const t=c.direction(this.position,this.game.player.position),i=c.scale(c.normalize(t),this.speed);r.Body.setVelocity(this.body,i)}else if(this.targetChangeTime++,this.targetChangeTime>=this.targetChangeCooldown&&(this.targetPoint=this.getNewTargetPoint(),this.targetChangeTime=0),c.distance(this.position,this.targetPoint)>1){const i=c.direction(this.position,this.targetPoint),o=c.scale(c.normalize(i),this.idleSpeed);r.Body.setVelocity(this.body,o)}this.animTime+=this.animSpeed,this.animTime>=3&&(this.animTime=0),this.sprite.currentFrame=Math.floor(this.animTime)}draw(e){if(!this.dead&&(super.draw(e),this.damageFlashTime>0)){const t=this.position,i=this.context;i.save(),i.globalAlpha=this.damageFlashTime/this.damageFlashDuration,i.fillStyle="rgba(255, 0, 0, 0.5)",i.fillRect(t.x-this.size.x/2,t.y-this.size.y/2,this.size.x,this.size.y),i.restore()}}}d(S,"name","Bee");class z extends y{constructor(e,t,i,o){var a;t.isStatic=!0,t.friction=.1,t.frictionStatic=.5,t.restitution=0,super(e,t,i),this.game=o,this.visible=!!((a=t.render)!=null&&a.visible)}draw(e){if(!this.visible)return;const t=this.body.position;this.sprite.drawStatic(this.context,t.x,t.y,0,0)}}const p=66,x=70,v=13,H=document.getElementById("screen"),n=new A(H,{initialScene:"mainMenu"});let f=!1,m=!0;n.registerActor("player",b);n.registerActor("bee",S);n.registerActor("platform",z);n.sceneManager.registerScene({name:"mainMenu",type:"menu",gameType:"menu",sprites:[["assets/platform.png",32]],background:[0,0,0],onEnter:()=>{n.keys.addKey(v,s=>{s||n.sceneManager.switchTo("level1")})},onExit:()=>{n.keys.removeKey(v)}});const B={name:"level1",type:"level",title:"Simple Platformer",gameType:"sideScroll",sprites:[["assets/player.png",32],["assets/platform.png",32],["assets/enemy.png",32]],player:{type:"player",position:[100,100],size:[32,32],sprite:0,animations:[["idle",0,0,!0],["run",1,0],["jump",2,0]]},entities:[{type:"platform",position:[320,450],size:[640,32],sprite:1},{type:"platform",position:[100,350],size:[128,32],sprite:1},{type:"platform",position:[400,250],size:[128,32],sprite:1},{type:"platform",position:[200,150],size:[128,32],sprite:1},{type:"platform",position:[16,240],size:[32,480],sprite:1,render:{visible:!1}},{type:"platform",position:[624,240],size:[32,480],sprite:1,render:{visible:!1}},{type:"bee",position:[300,200],size:[32,32],sprite:2,animations:[["idle",0,0,!0],["left",1,0],["right",2,0]]},{type:"bee",position:[500,150],size:[32,32],sprite:2,animations:[["idle",0,0,!0],["left",1,0],["right",2,0]]}],onEnter:()=>{n.keys.addKey(p,s=>{s||(f=!f,E(f))}),n.keys.addKey(x,s=>{s||(m=!m,w(m))}),w(m)},onExit:()=>{n.keys.removeKey(p),n.keys.removeKey(x)}};n.sceneManager.setLevelData("level1",B);function E(s){n.player&&n.player.getConstraint("debug").setWireframe(s);for(let e of n.entities)e.getConstraint("debug").setWireframe(s)}function w(s){n.player&&n.player.getConstraint("debug").setShowFPS(s);for(let e of n.entities)e.getConstraint("debug").setShowFPS(s)}const I=n.drawGameOver;n.drawGameOver=function(){I.call(this),this.context.font="20px Arial",this.context.fillText("Press M to return to menu",this.width/2,this.height/2+80)};n.keys.addKey(77,s=>{!s&&n.isGameOver&&(n.isGameOver=!1,n.sceneManager.switchTo("mainMenu"))});n.beforeUpdate=s=>{const e=n.sceneManager.getCurrentScene();(e==null?void 0:e.config.type)==="menu"&&(n.context.save(),n.context.fillStyle="#fff",n.context.font="48px Arial",n.context.textAlign="center",n.context.textBaseline="middle",n.context.fillText("Platformer Game",n.width/2,n.height/2-40),n.context.font="24px Arial",n.context.fillText("Press Enter to Start",n.width/2,n.height/2+20),n.context.restore())};n.start();
